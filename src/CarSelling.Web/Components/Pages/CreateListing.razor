@page "/create-listing"
@inject ICarListingApiService CarListingService
@inject CarBrandApiService CarBrandService
@inject CarModelApiService CarModelService
@inject NavigationManager Navigation
@using CarSelling.Shared.DTOs
@using CarSelling.Web.Services
@using CarSelling.Shared.Models

<PageTitle>Sell Your Car - CarMarket</PageTitle>

<div class="sell-car-container">
    <!-- Header Section -->
    <div class="sell-car-header">
        <div class="container">
            <div class="header-breadcrumb">
                <button class="back-button" @onclick="GoBack">
                    <svg class="back-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    Back to listings
                </button>
                <span class="breadcrumb-separator">/</span>
                <span class="breadcrumb-current">Sell Your Car</span>
            </div>
            
            <div class="header-content">
                <h1 class="main-title">Sell Your Car</h1>
                <p class="main-subtitle">Create a detailed listing to attract potential buyers</p>
                
                <!-- Progress Section -->
                <div class="progress-section">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: @(((float)currentStep / totalSteps) * 100)%"></div>
                    </div>
                    <div class="progress-steps">
                        @for (int i = 1; i <= totalSteps; i++)
                        {
                            int stepNum = i;
                            <div class="progress-step @(currentStep >= stepNum ? "active" : "") @(currentStep > stepNum ? "completed" : "")">
                                <div class="step-circle">
                                    @if (currentStep > stepNum)
                                    {
                                        <svg class="check-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                    }
                                    else if (stepNum == 1)
                                    {
                                        <svg class="step-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12a3 3 0 116 0 3 3 0 01-6 0z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14h2l-2-8H5l-2 8h2m6 5a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                        </svg>
                                    }
                                    else if (stepNum == 2)
                                    {
                                        <svg class="step-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                        </svg>
                                    }
                                    else if (stepNum == 3)
                                    {
                                        <svg class="step-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg class="step-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                        </svg>
                                    }
                                </div>
                                <span class="step-title">@GetStepTitle(stepNum)</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Form Content -->
    <div class="container form-content">
        <EditForm Model="@createModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            
            @if (showValidationSummary)
            {
                <div class="validation-summary">
                    <ValidationSummary />
                </div>
            }

            <!-- Step 1: Basic Information -->
            @if (currentStep == 1)
            {
                <div class="form-card">
                    <div class="card-header">
                        <h2 class="card-title">
                            <svg class="card-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12a3 3 0 116 0 3 3 0 01-6 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14h2l-2-8H5l-2 8h2m6 5a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            Basic Vehicle Information
                        </h2>
                    </div>
                    <div class="card-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label class="field-label">Brand *</label>
                                <InputSelect @bind-Value="createModel.Make" @onchange="OnBrandChanged" class="field-select">
                                    <option value="">Select brand</option>
                                    @if (availableBrandNames != null)
                                    {
                                        @foreach (var brand in availableBrandNames)
                                        {
                                            <option value="@brand">@brand</option>
                                        }
                                    }
                                    else
                                    {
                                        <option disabled>Loading brands...</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => createModel.Make)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Model *</label>
                                <InputSelect @bind-Value="createModel.Model" class="field-select" disabled="@(string.IsNullOrEmpty(createModel.Make))">
                                    <option value="">@(string.IsNullOrEmpty(createModel.Make) ? "Select brand first" : "Select model")</option>
                                    @if (availableModelNames != null)
                                    {
                                        @foreach (var model in availableModelNames)
                                        {
                                            <option value="@model">@model</option>
                                        }
                                    }
                                    else if (!string.IsNullOrEmpty(createModel.Make))
                                    {
                                        <option disabled>Loading models...</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => createModel.Model)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Generation</label>
                                <InputText @bind-Value="createModel.ModelGeneration" class="field-input" placeholder="e.g., XV70, 10th Gen, Highland" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Year *</label>
                                <InputNumber @bind-Value="createModel.Year" class="field-input" placeholder="e.g., 2022" />
                                <ValidationMessage For="@(() => createModel.Year)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Body Type *</label>
                                <InputSelect @bind-Value="createModel.BodyType" class="field-select">
                                    <option value="">Select body type</option>
                                    <option value="Sedan">Sedan</option>
                                    <option value="SUV">SUV</option>
                                    <option value="Truck">Truck</option>
                                    <option value="Coupe">Coupe</option>
                                    <option value="Convertible">Convertible</option>
                                    <option value="Hatchback">Hatchback</option>
                                    <option value="Wagon">Wagon</option>
                                    <option value="Van">Van</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => createModel.BodyType)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Price (USD) *</label>
                                <InputNumber @bind-Value="createModel.Price" class="field-input" placeholder="e.g., 25000" />
                                <ValidationMessage For="@(() => createModel.Price)" />
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Step 2: Specifications -->
            @if (currentStep == 2)
            {
                <div class="form-card">
                    <div class="card-header">
                        <h2 class="card-title">
                            <svg class="card-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            Vehicle Specifications
                        </h2>
                    </div>
                    <div class="card-content">
                        <!-- Engine & Performance -->
                        <div class="section-header">
                            <h3>Engine & Performance</h3>
                        </div>
                        <div class="form-grid grid-3">
                            <div class="form-field">
                                <label class="field-label">Mileage *</label>
                                <InputNumber @bind-Value="createModel.Mileage" class="field-input" placeholder="e.g., 50000" />
                                <ValidationMessage For="@(() => createModel.Mileage)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Fuel Type *</label>
                                <InputSelect @bind-Value="createModel.FuelType" class="field-select">
                                    <option value="">Select fuel type</option>
                                    <option value="Gasoline">Gasoline</option>
                                    <option value="Diesel">Diesel</option>
                                    <option value="Hybrid">Hybrid</option>
                                    <option value="Electric">Electric</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => createModel.FuelType)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Transmission *</label>
                                <InputSelect @bind-Value="createModel.Transmission" class="field-select">
                                    <option value="">Select transmission</option>
                                    <option value="Automatic">Automatic</option>
                                    <option value="Manual">Manual</option>
                                    <option value="CVT">CVT</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => createModel.Transmission)" />
                            </div>
                        </div>

                        <div class="section-separator"></div>

                        <!-- Additional Specifications -->
                        <div class="section-header">
                            <h3>Additional Specifications</h3>
                        </div>
                        <div class="form-grid grid-3">
                            <div class="form-field">
                                <label class="field-label">Engine Size</label>
                                <InputText @bind-Value="createModel.EngineSize" class="field-input" placeholder="e.g., 2.5L" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Cylinders</label>
                                <InputNumber @bind-Value="cylinders" class="field-input" placeholder="e.g., 4" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Drivetrain</label>
                                <InputSelect @bind-Value="createModel.Drivetrain" class="field-select">
                                    <option value="">Select drivetrain</option>
                                    <option value="Front-Wheel Drive">Front-Wheel Drive</option>
                                    <option value="Rear-Wheel Drive">Rear-Wheel Drive</option>
                                    <option value="All-Wheel Drive">All-Wheel Drive</option>
                                    <option value="Four-Wheel Drive">Four-Wheel Drive</option>
                                </InputSelect>
                            </div>

                            <div class="form-field">
                                <label class="field-label">Doors</label>
                                <InputSelect @bind-Value="doors" class="field-select">
                                    <option value="">Number of doors</option>
                                    <option value="2">2 doors</option>
                                    <option value="4">4 doors</option>
                                    <option value="5">5 doors</option>
                                </InputSelect>
                            </div>

                            <div class="form-field">
                                <label class="field-label">Seats</label>
                                <InputNumber @bind-Value="seats" class="field-input" placeholder="e.g., 5" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Exterior Color</label>
                                <InputText @bind-Value="createModel.ExteriorColor" class="field-input" placeholder="e.g., Midnight Black Metallic" />
                            </div>
                        </div>

                        <div class="section-separator"></div>

                        <!-- Condition & Status -->
                        <div class="section-header">
                            <h3>Condition & Status</h3>
                        </div>
                        <div class="form-grid">
                            <div class="form-field">
                                <label class="field-label">Condition *</label>
                                <InputSelect @bind-Value="createModel.Condition" class="field-select">
                                    <option value="">Select condition</option>
                                    <option value="Excellent">Excellent</option>
                                    <option value="Very Good">Very Good</option>
                                    <option value="Good">Good</option>
                                    <option value="Fair">Fair</option>
                                    <option value="Poor">Poor</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => createModel.Condition)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Damage Status</label>
                                <InputSelect @bind-Value="createModel.DamageStatus" class="field-select">
                                    <option value="">Select damage status</option>
                                    <option value="No damage">No damage</option>
                                    <option value="Minor scratches">Minor scratches</option>
                                    <option value="Repaired damage">Repaired damage</option>
                                    <option value="Major damage">Major damage</option>
                                </InputSelect>
                            </div>

                            <div class="form-field">
                                <label class="field-label">Car Status</label>
                                <InputSelect @bind-Value="createModel.CarStatus" class="field-select">
                                    <option value="">Select car status</option>
                                    <option value="New">New</option>
                                    <option value="Used">Used</option>
                                    <option value="Certified Pre-Owned">Certified Pre-Owned</option>
                                </InputSelect>
                            </div>

                            <div class="form-field">
                                <label class="field-label">Financial Info</label>
                                <InputSelect @bind-Value="financialInfo" class="field-select">
                                    <option value="">Select financial info</option>
                                    <option value="Clear title">Clear title</option>
                                    <option value="Financing available">Financing available</option>
                                    <option value="Lease available">Lease available</option>
                                    <option value="Lien">Lien</option>
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Step 3: Photos & Description -->
            @if (currentStep == 3)
            {
                <div class="form-card">
                    <div class="card-header">
                        <h2 class="card-title">
                            <svg class="card-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            Photos & Description
                        </h2>
                    </div>
                    <div class="card-content">
                        <!-- Vehicle Photos -->
                        <div class="form-section">
                            <label class="field-label">Vehicle Photos *</label>
                            <div class="image-upload-section">
                                <div class="image-input-row">
                                    <input @bind="imageUrlInput" @onkeypress="HandleImageKeyPress" class="field-input" placeholder="Enter image URL" />
                                    <button type="button" class="add-image-btn" @onclick="AddImageUrl">
                                        <svg class="plus-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                        </svg>
                                    </button>
                                </div>
                                
                                @if (createModel.Images.Count > 0)
                                {
                                    <div class="image-preview-grid">
                                        @for (int i = 0; i < createModel.Images.Count; i++)
                                        {
                                            int index = i;
                                            <div class="image-preview-item">
                                                <img src="@createModel.Images[index]" alt="Car photo @(index + 1)" class="preview-image" />
                                                <button type="button" class="remove-image-btn" @onclick="() => RemoveImage(index)">
                                                    <svg class="trash-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                    </svg>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                <ValidationMessage For="@(() => createModel.Images)" />
                            </div>
                        </div>

                        <div class="section-separator"></div>

                        <!-- Description -->
                        <div class="form-section">
                            <label class="field-label">Description *</label>
                            <InputTextArea @bind-Value="createModel.Description" class="field-textarea" rows="4" 
                                         placeholder="Describe your vehicle's condition, history, and any special features..." />
                            <ValidationMessage For="@(() => createModel.Description)" />
                        </div>

                        <div class="section-separator"></div>

                        <!-- Equipment & Features -->
                        <div class="form-section">
                            <label class="field-label">Equipment & Features</label>
                            <div class="equipment-grid">
                                @foreach (var equipment in availableEquipment)
                                {
                                    <label class="equipment-item">
                                        <input type="checkbox" @onchange="@((e) => ToggleEquipment(equipment, (bool)e.Value!))" />
                                        <span class="equipment-checkmark"></span>
                                        <span class="equipment-text">@equipment</span>
                                    </label>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Step 4: Contact Information -->
            @if (currentStep == 4)
            {
                <div class="form-card">
                    <div class="card-header">
                        <h2 class="card-title">
                            <svg class="card-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                            Contact Information
                        </h2>
                    </div>
                    <div class="card-content">
                        <div class="form-grid">
                            <div class="form-field">
                                <label class="field-label">Full Name *</label>
                                <InputText @bind-Value="createModel.ContactName" class="field-input" placeholder="Your full name" />
                                <ValidationMessage For="@(() => createModel.ContactName)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Phone Number *</label>
                                <InputText @bind-Value="createModel.ContactPhone" class="field-input" placeholder="(555) 123-4567" />
                                <ValidationMessage For="@(() => createModel.ContactPhone)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Email Address *</label>
                                <InputText @bind-Value="createModel.ContactEmail" class="field-input" type="email" placeholder="your.email@example.com" />
                                <ValidationMessage For="@(() => createModel.ContactEmail)" />
                            </div>

                            <div class="form-field">
                                <label class="field-label">Location *</label>
                                <InputText @bind-Value="createModel.Location" class="field-input" placeholder="City, State" />
                                <ValidationMessage For="@(() => createModel.Location)" />
                            </div>
                        </div>

                        <div class="section-separator"></div>

                        <!-- Listing Preview -->
                        <div class="listing-preview">
                            <h3 class="preview-title">Listing Preview</h3>
                            <div class="preview-content">
                                <div class="preview-item">
                                    <span class="preview-label">Title:</span>
                                    <span class="preview-value">@createModel.Year @createModel.Make @createModel.Model</span>
                                </div>
                                <div class="preview-item">
                                    <span class="preview-label">Price:</span>
                                    <span class="preview-value price">$@(createModel.Price > 0 ? createModel.Price.ToString("N0") : "0")</span>
                                </div>
                                <div class="preview-item">
                                    <span class="preview-label">Location:</span>
                                    <span class="preview-value">@(string.IsNullOrEmpty(createModel.Location) ? "Not specified" : createModel.Location)</span>
                                </div>
                                <div class="preview-item">
                                    <span class="preview-label">Images:</span>
                                    <span class="preview-value">@createModel.Images.Count photo@(createModel.Images.Count != 1 ? "s" : "")</span>
                                </div>
                                <div class="preview-item">
                                    <span class="preview-label">Equipment:</span>
                                    <span class="preview-value">@createModel.Equipment.Count feature@(createModel.Equipment.Count != 1 ? "s" : "")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Navigation -->
            <div class="form-navigation">
                <button type="button" class="nav-button nav-button-prev @(currentStep == 1 ? "disabled" : "")" 
                        @onclick="PreviousStep" disabled="@(currentStep == 1)">
                    <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    Previous
                </button>
                
                @if (currentStep < totalSteps)
                {
                    <button type="button" class="nav-button nav-button-next" @onclick="NextStep">
                        Next
                        <svg class="nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                    </button>
                }
                else
                {
                    <button type="submit" class="nav-button nav-button-submit" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <div class="spinner"></div>
                        }
                        Create Listing
                    </button>
                }
            </div>
        </EditForm>
    </div>
</div>

@code {
    private ExtendedCreateCarListingDto createModel = new()
    {
        SellerType = "Private Seller",
        AvailableDate = DateTime.Now,
        TestDriveAvailable = true
    };
    
    private bool isSubmitting = false;
    private bool showValidationSummary = false;
    private int currentStep = 1;
    private const int totalSteps = 4;
    private string imageUrlInput = "";
    
    // Additional fields not in main DTO
    private int? cylinders;
    private string doors = "";
    private int? seats;
    private string financialInfo = "";

    private readonly List<string> availableEquipment = CarEquipment.AvailableEquipment;
    private List<string>? availableBrandNames;
    private List<string>? availableModelNames;
    private string? previousSelectedBrand;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableBrandNames = await CarBrandService.GetActiveBrandNamesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading car brands: {ex.Message}");
            availableBrandNames = new List<string>();
        }
    }

    private async Task OnBrandChanged(ChangeEventArgs e)
    {
        var selectedBrand = e.Value?.ToString();
        createModel.Make = selectedBrand ?? "";
        
        // Clear the model selection when brand changes
        createModel.Model = "";
        availableModelNames = null;
        
        // Load models for the selected brand
        if (!string.IsNullOrEmpty(selectedBrand) && selectedBrand != previousSelectedBrand)
        {
            try
            {
                availableModelNames = await CarModelService.GetModelNamesByBrandAsync(selectedBrand);
                previousSelectedBrand = selectedBrand;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading models for brand {selectedBrand}: {ex.Message}");
                availableModelNames = new List<string>();
            }
        }
        else if (string.IsNullOrEmpty(selectedBrand))
        {
            availableModelNames = null;
            previousSelectedBrand = null;
        }
    }

    private string GetStepTitle(int step)
    {
        return step switch
        {
            1 => "Basic Information",
            2 => "Specifications", 
            3 => "Photos & Description",
            4 => "Contact Details",
            _ => ""
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void NextStep()
    {
        if (ValidateCurrentStep())
        {
            currentStep = Math.Min(currentStep + 1, totalSteps);
        }
    }

    private void PreviousStep()
    {
        currentStep = Math.Max(currentStep - 1, 1);
    }

    private bool ValidateCurrentStep()
    {
        // Basic validation - in production you'd want more comprehensive validation
        switch (currentStep)
        {
            case 1:
                return !string.IsNullOrEmpty(createModel.Make) && 
                       !string.IsNullOrEmpty(createModel.Model) && 
                       createModel.Year > 0 && 
                       createModel.Price > 0 && 
                       !string.IsNullOrEmpty(createModel.BodyType);
            case 2:
                return createModel.Mileage > 0 && 
                       !string.IsNullOrEmpty(createModel.FuelType) && 
                       !string.IsNullOrEmpty(createModel.Transmission) && 
                       !string.IsNullOrEmpty(createModel.Condition);
            case 3:
                return createModel.Images.Count > 0 && 
                       !string.IsNullOrEmpty(createModel.Description);
            case 4:
                return !string.IsNullOrEmpty(createModel.ContactName) && 
                       !string.IsNullOrEmpty(createModel.ContactPhone) && 
                       !string.IsNullOrEmpty(createModel.ContactEmail) && 
                       !string.IsNullOrEmpty(createModel.Location);
            default:
                return true;
        }
    }

    private void HandleImageKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddImageUrl();
        }
    }

    private void AddImageUrl()
    {
        if (!string.IsNullOrWhiteSpace(imageUrlInput) && !createModel.Images.Contains(imageUrlInput))
        {
            createModel.Images.Add(imageUrlInput);
            imageUrlInput = "";
        }
    }

    private void RemoveImage(int index)
    {
        if (index >= 0 && index < createModel.Images.Count)
        {
            createModel.Images.RemoveAt(index);
        }
    }

    private void ToggleEquipment(string equipment, bool selected)
    {
        if (selected)
        {
            if (!createModel.Equipment.Contains(equipment))
                createModel.Equipment.Add(equipment);
        }
        else
        {
            createModel.Equipment.Remove(equipment);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!ValidateCurrentStep())
        {
            showValidationSummary = true;
            return;
        }

        isSubmitting = true;
        showValidationSummary = false;
        
        try
        {
            // Convert ExtendedCreateCarListingDto to CreateCarListingDto for API compatibility
            var basicCreateModel = new CreateCarListingDto
            {
                Title = $"{createModel.Year} {createModel.Make} {createModel.Model}",
                Make = createModel.Make,
                Model = createModel.Model,
                Year = createModel.Year,
                Price = createModel.Price,
                Mileage = createModel.Mileage,
                FuelType = createModel.FuelType,
                Transmission = createModel.Transmission,
                Description = createModel.Description,
                Images = createModel.Images,
                ContactEmail = createModel.ContactEmail,
                ContactPhone = createModel.ContactPhone,
                Location = createModel.Location
            };

            var listing = await CarListingService.CreateCarListingAsync(basicCreateModel);
            Navigation.NavigateTo($"/car/{listing.Id}");
        }
        catch (Exception ex)
        {
            showValidationSummary = true;
            Console.WriteLine($"Error creating listing: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}