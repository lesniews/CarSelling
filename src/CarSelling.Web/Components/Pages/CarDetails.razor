@page "/car/{Id:int}"
@inject ICarListingApiService CarListingService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using CarSelling.Shared.Models
@using CarSelling.Web.Services

<PageTitle>@(car?.Title ?? "Car Details") - CarSelling</PageTitle>

<div class="car-details-container">
    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner"></div>
            <p>Loading car details...</p>
        </div>
    }
    else if (car == null)
    {
        <div class="not-found-state">
            <h3>Car not found</h3>
            <p>The car you're looking for doesn't exist or has been removed.</p>
            <div class="not-found-actions">
                <a href="/search" class="btn btn-primary">Browse Other Cars</a>
                <a href="/" class="btn btn-outline">Go Home</a>
            </div>
        </div>
    }
    else
    {
        <!-- Breadcrumb and Back Button -->
        <div class="breadcrumb-section">
            <button class="back-btn" @onclick="GoBack">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Back to listings
            </button>
            <span class="breadcrumb-separator">/</span>
            <span class="breadcrumb-current">@car.Make @car.Model</span>
        </div>

        <div class="car-details-grid">
            <!-- Left Column - Images and Details -->
            <div class="left-column">
                <!-- Image Gallery -->
                <div class="image-gallery-card">
                    <div class="main-image-container">
                        <div class="main-image">
                            <div class="image-placeholder">
                                <svg class="camera-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                </svg>
                                <p>@car.Year @car.Make @car.Model</p>
                            </div>
                            <div class="image-badges">
                                <span class="condition-badge">@(string.IsNullOrEmpty(car.Condition) ? "Used" : car.Condition)</span>
                            </div>
                            <div class="image-actions">
                                <button class="favorite-btn" @onclick="ToggleFavorite">
                                    <svg class="@(isFavorite ? "heart-filled" : "heart-outline")" fill="@(isFavorite ? "currentColor" : "none")" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                                    </svg>
                                </button>
                                <button class="share-btn" @onclick="ShareListing">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Car Title and Price -->
                <div class="car-header">
                    <h1 class="car-title">@car.Title</h1>
                    <p class="car-price">$@car.Price.ToString("N0")</p>
                    <div class="car-meta">
                        <div class="meta-item">
                            <svg class="meta-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            <span>@(car.Location ?? "Location not specified")</span>
                        </div>
                        <div class="meta-item">
                            <svg class="meta-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span>Posted @car.CreatedAt.ToString("MMM dd, yyyy")</span>
                        </div>
                    </div>
                </div>

                <!-- Key Specifications -->
                <div class="specs-card">
                    <div class="card-header">
                        <h3>Key Specifications</h3>
                    </div>
                    <div class="specs-grid">
                        <div class="spec-item">
                            <svg class="spec-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            <div class="spec-value">@car.Year</div>
                            <div class="spec-label">Year</div>
                        </div>
                        <div class="spec-item">
                            <svg class="spec-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                            </svg>
                            <div class="spec-value">@car.Mileage.ToString("N0")</div>
                            <div class="spec-label">Miles</div>
                        </div>
                        <div class="spec-item">
                            <svg class="spec-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z"></path>
                            </svg>
                            <div class="spec-value">@(car.FuelType ?? "N/A")</div>
                            <div class="spec-label">Fuel Type</div>
                        </div>
                        <div class="spec-item">
                            <svg class="spec-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            <div class="spec-value">@(car.Transmission ?? "N/A")</div>
                            <div class="spec-label">Transmission</div>
                        </div>
                    </div>
                </div>

                <!-- Detailed Specifications -->
                <div class="detailed-specs-card">
                    <div class="card-header">
                        <h3>Detailed Specifications</h3>
                    </div>
                    <div class="detailed-specs-content">
                        <!-- Vehicle Details -->
                        <div class="spec-section">
                            <h4 class="spec-section-title">
                                <svg class="section-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12a3 3 0 116 0 3 3 0 01-6 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14h2l-2-8H5l-2 8h2m6 5a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                </svg>
                                Vehicle Details
                            </h4>
                            <div class="spec-details-grid">
                                <div class="spec-detail">
                                    <span class="detail-label">Make:</span>
                                    <span class="detail-value">@car.Make</span>
                                </div>
                                <div class="spec-detail">
                                    <span class="detail-label">Model:</span>
                                    <span class="detail-value">@car.Model</span>
                                </div>
                                <div class="spec-detail">
                                    <span class="detail-label">Year:</span>
                                    <span class="detail-value">@car.Year</span>
                                </div>
                                <div class="spec-detail">
                                    <span class="detail-label">Mileage:</span>
                                    <span class="detail-value">@car.Mileage.ToString("N0") miles</span>
                                </div>
                            </div>
                        </div>

                        <div class="spec-separator"></div>

                        <!-- Engine & Performance -->
                        <div class="spec-section">
                            <h4 class="spec-section-title">
                                <svg class="section-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                </svg>
                                Engine & Performance
                            </h4>
                            <div class="spec-details-grid">
                                <div class="spec-detail">
                                    <span class="detail-label">Fuel Type:</span>
                                    <span class="detail-value">@(car.FuelType ?? "N/A")</span>
                                </div>
                                <div class="spec-detail">
                                    <span class="detail-label">Transmission:</span>
                                    <span class="detail-value">@(car.Transmission ?? "N/A")</span>
                                </div>
                                @if (!string.IsNullOrEmpty(car.EngineSize))
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">Engine Size:</span>
                                        <span class="detail-value">@car.EngineSize</span>
                                    </div>
                                }
                                @if (car.Horsepower.HasValue)
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">Horsepower:</span>
                                        <span class="detail-value">@car.Horsepower HP</span>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(car.Drivetrain))
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">Drivetrain:</span>
                                        <span class="detail-value">@car.Drivetrain</span>
                                    </div>
                                }
                                @if (car.FuelEconomyCity.HasValue || car.FuelEconomyHighway.HasValue)
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">Fuel Economy:</span>
                                        <span class="detail-value">
                                            @if (car.FuelEconomyCity.HasValue && car.FuelEconomyHighway.HasValue)
                                            {
                                                @($"{car.FuelEconomyCity}/{car.FuelEconomyHighway} MPG")
                                            }
                                            else if (car.FuelEconomyCity.HasValue)
                                            {
                                                @($"{car.FuelEconomyCity} MPG City")
                                            }
                                            else if (car.FuelEconomyHighway.HasValue)
                                            {
                                                @($"{car.FuelEconomyHighway} MPG Highway")
                                            }
                                        </span>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="spec-separator"></div>

                        <!-- Additional Details -->
                        <div class="spec-section">
                            <h4 class="spec-section-title">
                                <svg class="section-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                Additional Details
                            </h4>
                            <div class="spec-details-grid">
                                @if (!string.IsNullOrEmpty(car.ExteriorColor))
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">Exterior Color:</span>
                                        <span class="detail-value">@car.ExteriorColor</span>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(car.InteriorColor))
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">Interior Color:</span>
                                        <span class="detail-value">@car.InteriorColor</span>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(car.InteriorMaterial))
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">Interior Material:</span>
                                        <span class="detail-value">@car.InteriorMaterial</span>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(car.BodyType))
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">Body Type:</span>
                                        <span class="detail-value">@car.BodyType</span>
                                    </div>
                                }
                                @if (car.PreviousOwners.HasValue)
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">Previous Owners:</span>
                                        <span class="detail-value">@car.PreviousOwners</span>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(car.VIN))
                                {
                                    <div class="spec-detail">
                                        <span class="detail-label">VIN:</span>
                                        <span class="detail-value">@car.VIN</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Equipment & Features -->
                @if (car.Equipment != null && car.Equipment.Any())
                {
                    <div class="equipment-card">
                        <div class="card-header">
                            <h3>Equipment & Features</h3>
                        </div>
                        <div class="equipment-content">
                            <div class="equipment-list">
                                @foreach (var equipment in car.Equipment)
                                {
                                    <div class="equipment-item">
                                        <svg class="equipment-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                        <span>@equipment</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                <!-- Vehicle History -->
                <div class="history-card">
                    <div class="card-header">
                        <h3>Vehicle History</h3>
                    </div>
                    <div class="history-content">
                        <div class="history-items">
                            <div class="history-item">
                                <div class="history-icon @(car.AccidentHistory ? "warning" : "success")">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        @if (car.AccidentHistory)
                                        {
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                        }
                                        else
                                        {
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        }
                                    </svg>
                                </div>
                                <div class="history-text">
                                    <span class="history-label">Accident History:</span>
                                    <span class="history-value">@(car.AccidentHistory ? "Previous accident reported" : "No accidents reported")</span>
                                </div>
                            </div>
                            <div class="history-item">
                                <div class="history-icon @(car.ServiceHistoryAvailable ? "success" : "neutral")">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        @if (car.ServiceHistoryAvailable)
                                        {
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        }
                                        else
                                        {
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        }
                                    </svg>
                                </div>
                                <div class="history-text">
                                    <span class="history-label">Service History:</span>
                                    <span class="history-value">@(car.ServiceHistoryAvailable ? "Service records available" : "Service history not available")</span>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(car.DamageStatus))
                            {
                                <div class="history-item">
                                    <div class="history-icon @(car.DamageStatus.ToLower().Contains("no") ? "success" : "warning")">
                                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            @if (car.DamageStatus.ToLower().Contains("no"))
                                            {
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            }
                                            else
                                            {
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                            }
                                        </svg>
                                    </div>
                                    <div class="history-text">
                                        <span class="history-label">Damage Status:</span>
                                        <span class="history-value">@car.DamageStatus</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Description -->
                @if (!string.IsNullOrEmpty(car.Description))
                {
                    <div class="description-card">
                        <div class="card-header">
                            <h3>Description</h3>
                        </div>
                        <div class="description-content">
                            <p>@car.Description</p>
                        </div>
                    </div>
                }
            </div>

            <!-- Right Column - Seller Info and Actions -->
            <div class="right-column">
                <!-- Seller Information -->
                <div class="seller-card">
                    <div class="card-header">
                        <h3 class="seller-title">
                            <svg class="seller-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                            Seller Information
                        </h3>
                    </div>
                    <div class="seller-content">
                        <div class="seller-info">
                            <div class="seller-name-badge">
                                <span class="seller-name">@(car.ContactEmail?.Split('@')[0] ?? "Seller")</span>
                                <span class="seller-type-badge">Private Seller</span>
                            </div>
                        </div>

                        <div class="contact-actions">
                            <a href="tel:@car.ContactPhone" class="btn btn-primary btn-large">
                                <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                                </svg>
                                @(car.ContactPhone ?? "Call Seller")
                            </a>
                            <a href="mailto:@car.ContactEmail?subject=Interest in @car.Title" class="btn btn-outline btn-large">
                                <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                </svg>
                                Email Seller
                            </a>
                        </div>

                        <div class="safety-tips">
                            <p>• Always meet in a safe, public location</p>
                            <p>• Inspect the vehicle thoroughly</p>
                            <p>• Verify all documentation</p>
                        </div>
                    </div>
                </div>

                <!-- Price Breakdown -->
                <div class="price-card">
                    <div class="card-header">
                        <h3>Price Breakdown</h3>
                    </div>
                    <div class="price-content">
                        <div class="price-main">
                            <span class="price-label">Listed Price:</span>
                            <span class="price-amount">$@car.Price.ToString("N0")</span>
                        </div>
                        <div class="price-separator"></div>
                        <div class="price-notes">
                            <p>• Price excludes taxes and fees</p>
                            @if (!string.IsNullOrEmpty(car.FinancingOptions))
                            {
                                <p>• @car.FinancingOptions</p>
                            }
                            else
                            {
                                <p>• Financing options may be available</p>
                            }
                            @if (car.TradeInAccepted)
                            {
                                <p>• Trade-in accepted</p>
                            }
                            @if (car.NegotiablePrice)
                            {
                                <p>• Price is negotiable</p>
                            }
                        </div>
                    </div>
                </div>

                <!-- Similar Cars -->
                @if (relatedCars != null && relatedCars.Any())
                {
                    <div class="similar-cars-card">
                        <div class="card-header">
                            <h3>Similar Cars</h3>
                        </div>
                        <div class="similar-cars-content">
                            @foreach (var relatedCar in relatedCars.Take(3))
                            {
                                <div class="similar-car-item" @onclick="() => NavigateToCarDetails(relatedCar.Id)">
                                    <div class="similar-car-image">
                                        <div class="similar-car-placeholder">
                                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12a3 3 0 116 0 3 3 0 01-6 0z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14h2l-2-8H5l-2 8h2m6 5a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                            </svg>
                                        </div>
                                    </div>
                                    <div class="similar-car-info">
                                        <h4 class="similar-car-title">@relatedCar.Title</h4>
                                        <p class="similar-car-price">$@relatedCar.Price.ToString("N0")</p>
                                        <p class="similar-car-location">@(relatedCar.Location ?? "Location N/A")</p>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int Id { get; set; }

    private CarListing? car;
    private IEnumerable<CarListing>? relatedCars;
    private bool isLoading = true;
    private bool isFavorite = false;
    private int currentImageIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCarDetails();
    }

    private async Task LoadCarDetails()
    {
        isLoading = true;
        try
        {
            car = await CarListingService.GetCarByIdAsync(Id);

            if (car != null)
            {
                // Load related cars (same make or similar price range)
                var searchDto = new CarSelling.Shared.DTOs.CarListingSearchDto
                    {
                        Make = car.Make,
                        PageSize = 6
                    };
                var allRelated = await CarListingService.SearchCarsAsync(searchDto);
                relatedCars = allRelated.Where(c => c.Id != car.Id);
            }
        }
        catch
        {
            // Log error in production - for now just set null
            car = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/search");
    }

    private void ToggleFavorite()
    {
        isFavorite = !isFavorite;
        // In a real app, you'd save this to a favorites service
    }

    private async Task ShareListing()
    {
        try
        {
            // Try to use Web Share API
            await JSRuntime.InvokeVoidAsync("navigator.share", new
            {
                title = car?.Title,
                url = Navigation.Uri
            });
        }
        catch
        {
            try
            {
                // Fallback: copy to clipboard
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Navigation.Uri);
                // You could show a toast notification here
            }
            catch
            {
                // Final fallback: just ignore the error
                // In a real app, you might show a message to the user
            }
        }
    }

    private void NavigateToCarDetails(int carId)
    {
        Navigation.NavigateTo($"/car/{carId}");
    }

    private void NextImage()
    {
        if (car?.Images != null && car.Images.Count > 0)
        {
            currentImageIndex = (currentImageIndex + 1) % car.Images.Count;
        }
    }

    private void PreviousImage()
    {
        if (car?.Images != null && car.Images.Count > 0)
        {
            currentImageIndex = currentImageIndex == 0 ? car.Images.Count - 1 : currentImageIndex - 1;
        }
    }

    private void SelectImage(int index)
    {
        currentImageIndex = index;
    }

    private string GetConditionClass(string? condition)
    {
        return condition?.ToLower() switch
        {
            "excellent" => "excellent",
            "very good" => "very-good", 
            "good" => "good",
            "fair" => "fair",
            _ => "good"
        };
    }

    private string FormatEquipmentList(List<string> equipment)
    {
        if (equipment == null || !equipment.Any())
            return "No equipment listed";
        
        return string.Join(", ", equipment);
    }
}